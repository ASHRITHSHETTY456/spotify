AWSTemplateFormatVersion: '2010-09-09'

Resources:
  CloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        - Arn: !GetAtt LastAssignmentLambdaFunction.Arn
          Id: TargetFunctionV1



  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LastAssignmentLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CloudWatchEventRule.Arn
    DependsOn: CloudWatchEventRule



  LastAssignmentLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: lastassignmenttemp1
      Runtime: python3.7
      Timeout: 300
      Role: arn:aws:iam::944276872482:role/lastassignment
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import base64
          import json
          import os
          import requests
          import boto3

          def lambda_handler(event, context):
            print(event)
            context.timeout = 300
            client_id = "9818992e613f4e29960a078004750b68"
            client_secret = "906c386a273940a5af14d46757406bd5"

            def get_token():
              auth_string = client_id + ":" + client_secret
              auth_bytes = auth_string.encode("utf-8")
              auth_base64 = str(base64.b64encode(auth_bytes), "utf-8")
              url = "https://accounts.spotify.com/api/token"
              headers = {
                "Authorization": "Basic " + auth_base64,
                "Content-Type": "application/x-www-form-urlencoded"
              }
              data = {"grant_type": "client_credentials"}
              result = requests.post(url, headers=headers, data=data)
              json_result = json.loads(result.content)
              if "access_token" in json_result:
                token = json_result["access_token"]
                return token
              else:
                print("Error response:", json_result)
                return None

            def get_auth_header(token):
              return {"Authorization": "Bearer " + token}

            def search_for_artist(token, artist_name):
              base_url = "https://api.spotify.com/v1"
              search_url = f"{base_url}/search"
              headers = get_auth_header(token)
              query = f"?q={artist_name}&type=artist&limit=1"
              query_url = search_url + query
              result = requests.get(query_url, headers=headers)
              json_result = json.loads(result.content)["artists"]["items"]
              if len(json_result) == 0:
                print("no artist")
                return None
              return json_result[0]

            def get_songs_by_artist(token, artist_id):
              url = f"https://api.spotify.com/v1/artists/{artist_id}/top-tracks?country=US"
              headers = get_auth_header(token)
              result = requests.get(url, headers=headers)
              json_result = json.loads(result.content)["tracks"]
              return json_result

            token = get_token()
            result = search_for_artist(token, "ACDC")
            artist_id = result["id"]
            songs = get_songs_by_artist(token, artist_id)

            s3 = boto3.client("s3")
            s3.put_object(
              Body=json.dumps(songs),
              Bucket="ashrithshettytask",
              Key="raw_data/songs.json"
            )

            return {
              "statusCode": 200,
              "body": json.dumps("Extraction complete")
            }


  TransformationAssignmentLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: transformation_assignmenttemp
      Runtime: python3.7
      Timeout: 300
      Role: arn:aws:iam::944276872482:role/lastassignment2
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import pandas as pd
          import boto3
          import os

          def lambda_handler(event, context):
            # Load raw data from S3
            s3 = boto3.client("s3")
            response = s3.get_object(Bucket="ashrithshettytask", Key="raw_data/songs.json")
            raw_data = json.loads(response["Body"].read())

            # Perform data transformation
            songs = []
            for song in raw_data:
              song_name = song['album']["name"]
              popularity = song["popularity"]
              duration_ms = song["duration_ms"]
              songs.append({
                "song_name": song_name,
                "popularity": popularity,
                "duration_ms": duration_ms
              })

            # Save the transformed data to S3
            transformed_data = pd.DataFrame(songs)
            transformed_data.to_csv("/tmp/songs.csv", index=False)
            s3.upload_file("/tmp/songs.csv","ashrithshettytask2", "transformed_data/songs.csv")

            return {
              "statusCode": 200,
              "body": json.dumps("Transformation complete")
            }
      Layers:
        - !Ref MyLayer1
        - !Ref MyLayer2

  MyLayer1:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: packagebucket123
        S3Key: my-package.zip
      Description: My layer
      LayerName: my-layer1

  MyLayer2:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: packagebucket123
        S3Key: my-second-lambda-package.zip
      Description: My layer
      LayerName: my-layer2


#  MyS3Bucket1BucketPolicy:
#    Type: AWS::S3::BucketPolicy
#    Properties:
#      Bucket: !Ref MyS3Bucket1
#      PolicyDocument:
#        Statement:
#          - Effect: Allow
#            Principal: '*'
#            Action: 
#              - s3:*
#           Resource: !Join [ "", [ "arn:aws:s3:::", !Ref MyS3Bucket1, "/*" ] ]  



#  MyS3Bucket1NotificationConfiguration:
#    Type: AWS::S3::BucketNotificationConfiguration
#    Properties:
#      Bucket: !Ref MyS3Bucket1
#      NotificationConfiguration:
#        LambdaConfigurations:
#          - Event: s3:ObjectCreated:*
#            Function: !GetAtt TransformationAssignmentLambdaFunction.Arn